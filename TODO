S C O P  S C O P E :

clean everything up, reorganize structures and code/files.
today : axis, handles, rotations (objects & camera)
maybe sdl inputs too.

lighting

* handles (scene axes and grid, objects local/world coordinates (switch), rotation handles, scale handles, position handles)
all sorts of handles and gizmos.

* showFPS
* close button triggers SDL_QUIT ðŸ¤  event
* input handler !

ability to lock on a gameobject (camera rotates around it)
object basic info when hovering over it.

------------------------------------------------------------------------------------------------------------------------------------------------
SERIALIZATION !

IMPORTANT : algo to sort the vertices and indices (eventually i would like to just indicate order with mouse drag or whatever)
IMPORTANT : Drawcall analysis (slider shows each primitive being renderered)

* import button for .obj files with import flags/toggles -> texture, material, animation, rigging, normals etc.

test the parsing (multiple objects, no objects... etc)

remove this file before finishing the project
remove .vscode before finishing the project
remove display.c
remove stash folder with everything it contains

libmath is not clean (norminette, unixcase...)
norminette on all (EVERYTHING)
check 42 headers
check scop LEAKS (try different setup interruptions...)
check everything

------------------------------------------------------------------------------------------------------------------------------------------------

O U T  O F  S C O P E :

pick_fbo => use a tiny frustrum that surrounds the mouse (ray)

* error logger (console log "pops" up when there is a debug/error)
-> it's like a sidebar on top of the folder window, that slides up (you can lock it to keep it docked, small notifications as exclamation mark)

* float field and toggle for fps capping (e.g. toggle[/] and [60fps])
* vector / math libraries in c++ with operators lh +(rh) lh =(rh)
* 3d textures and tetrahedrons eventually

gameObject = { rendering properties, physics properties, audio properties, behaviour(s), matter properties etc. };